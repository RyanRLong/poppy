'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Popup = function () {
  function Popup(text, container) {
    _classCallCheck(this, Popup);

    this.container = container;
    this.element = document.createElement('span');
    this.element.setAttribute('class', 'popup');
    this.element.textContent = text;
    this.attachCloseButton();
    this.container.appendChild(this.element);
    this.addClass("enter");
    this.setIdle(5000);
    this.setExit(10000);
  }

  _createClass(Popup, [{
    key: 'addClass',
    value: function addClass(className) {
      this.element.classList.add(className);
      return this;
    }
  }, {
    key: 'removeClass',
    value: function removeClass(className) {
      this.element.classList.remove(className);
      return this;
    }
  }, {
    key: 'setIdle',
    value: function setIdle(milliseconds) {
      var _this = this;

      setTimeout(function () {
        _this.removeClass("enter");
        _this.addClass("idle");
      }, milliseconds);
      return this;
    }
  }, {
    key: 'setExit',
    value: function setExit(miliseconds) {
      var _this2 = this;

      setTimeout(function () {
        _this2.removeClass("idle");
        _this2.addClass("exit");
      }, miliseconds);
    }
  }, {
    key: 'render',
    value: function render() {
      this.container.appendChild(this.element);
      return this;
    }
  }, {
    key: 'attachCloseButton',
    value: function attachCloseButton() {
      var closeButton = document.createElement('div');
      closeButton.setAttribute('class', 'close-classic');
      this.element.appendChild(closeButton);
      return this;
    }
  }]);

  return Popup;
}();

var Container = function () {
  function Container() {
    _classCallCheck(this, Container);

    return this._createElement()._setAttributes()._attachToDom().container;
  }

  _createClass(Container, [{
    key: '_createElement',
    value: function _createElement() {
      console.log(this.container);
      this.container = document.createElement('div');
      return this;
    }
  }, {
    key: '_setAttributes',
    value: function _setAttributes() {
      console.log(this.container);
      this.container.setAttribute('class', 'container');
      this.container.setAttribute('id', 'container');
      return this;
    }
  }, {
    key: '_attachToDom',
    value: function _attachToDom() {
      console.log(this.container);
      document.body.appendChild(this.container);
      return this;
    }
  }]);

  return Container;
}();

var container = new Container();
console.log(new Container());

var _loop = function _loop(i) {
  setTimeout(function () {
    new Popup('Its now ' + (i + 1000), container);
  }, i * 2000);
};

for (var i = 0; i < 10; i++) {
  _loop(i);
}