'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint no-underscore-dangle: 0 */

var Container = function () {
  //eslint-disable-line
  function Container() {
    _classCallCheck(this, Container);

    return this._createElement()._setAttributes()._attachToDom().container;
  }

  _createClass(Container, [{
    key: '_createElement',
    value: function _createElement() {
      this.container = document.createElement('div');
      this.wrapper = document.createElement('div');
      return this;
    }
  }, {
    key: '_setAttributes',
    value: function _setAttributes() {
      this.container.setAttribute('id', 'poppy_container');
      this.wrapper.setAttribute('id', 'poppy_wrapper');
      return this;
    }
  }, {
    key: '_attachToDom',
    value: function _attachToDom() {
      document.body.appendChild(this.wrapper);
      this.wrapper.appendChild(this.container);
      return this;
    }
  }]);

  return Container;
}();;"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Poppy = //eslint-disable-line
function Poppy() {
  _classCallCheck(this, Poppy);

  return Object.freeze({
    warn: function warn(message) {
      return new Popup(message, "warning");
    },
    primary: function primary(message) {
      return new Popup(message, "primary");
    },
    error: function error(message) {
      return new Popup(message, "error");
    },
    danger: function danger(message) {
      return new Popup(message, "danger");
    },
    success: function success(message) {
      return new Popup(message, "success");
    }
  });
};;"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Popup = function () {
  //eslint-disable-line
  function Popup(text) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "ok";

    _classCallCheck(this, Popup);

    this.container = document.getElementById("poppy_container") ? document.getElementById("poppy_container") : new Container();
    this.element = document.createElement('span');
    this.element.setAttribute('class', "popup-" + type);
    this.element.textContent = text;
    this.currentTimers = [];
    this.onClick(this.deleteMe).onMouseOver(this.setPause).onMouseOut(this.setUnpause).attachCloseButton().addClass("enter").setExit(10000).setDestroy(10350).render();
    return Object.freeze(this);
  }

  _createClass(Popup, [{
    key: "addClass",
    value: function addClass(className) {
      this.element.classList.add(className);
      return this;
    }
  }, {
    key: "removeClass",
    value: function removeClass(className) {
      this.element.classList.remove(className);
      return this;
    }
  }, {
    key: "onClick",
    value: function onClick(func) {
      this.element.onclick = func.bind(this);
      return this;
    }
  }, {
    key: "onMouseOver",
    value: function onMouseOver(func) {
      this.element.onmouseover = func.bind(this);
      return this;
    }
  }, {
    key: "onMouseOut",
    value: function onMouseOut(func) {
      this.element.onmouseout = func.bind(this);
      return this;
    }
  }, {
    key: "setPause",
    value: function setPause() {
      this.clearAllTimers();
      this.addClass("pause");
      this.removeClass("enter");
      this.removeClass("exit");
      this.removeClass("idle");
    }
  }, {
    key: "setUnpause",
    value: function setUnpause() {
      this.removeClass("pause");
      this.addClass("idle");
      this.setExit(10000);
      this.setDestroy(10250);
    }
  }, {
    key: "setExit",
    value: function setExit(miliseconds) {
      var _this = this;

      var timer = setTimeout(function () {
        _this.removeClass("idle");
        _this.addClass("exit");
      }, miliseconds);
      this.currentTimers.push(timer);
      return this;
    }
  }, {
    key: "setDestroy",
    value: function setDestroy(milliseconds) {
      var _this2 = this;

      var timer = setTimeout(function () {
        _this2.destroy();
      }, milliseconds);
      this.currentTimers.push(timer);
      return this;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.element.parentNode.removeChild(this.element);
      return this;
    }
  }, {
    key: "deleteMe",
    value: function deleteMe() {
      this.clearAllTimers();
      this.setExit(0);
      this.setDestroy(250);
    }
  }, {
    key: "clearAllTimers",
    value: function clearAllTimers() {
      this.currentTimers.forEach(function (item) {
        clearTimeout(item);
      });
      return this;
    }
  }, {
    key: "render",
    value: function render() {
      this.container.appendChild(this.element);
      return this;
    }
  }, {
    key: "attachCloseButton",
    value: function attachCloseButton() {
      var closeButton = document.createElement('div');
      closeButton.setAttribute('class', 'close-thik');
      this.element.appendChild(closeButton);
      return this;
    }
  }]);

  return Popup;
}();;"use strict";